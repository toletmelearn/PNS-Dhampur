name: Deploy PNS-Dhampur School Management System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: pns_dhampur
          MYSQL_USER: pns_user
          MYSQL_PASSWORD: pns_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --name=mysql-test

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: pns_dhampur
      DB_USERNAME: root
      DB_PASSWORD: password
      APP_ENV: ${{ github.event_name == 'pull_request' && 'testing' || 'production' }}
      APP_DEBUG: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}
      LOG_LEVEL: ${{ github.event_name == 'pull_request' && 'debug' || 'error' }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip
        coverage: xdebug

    - name: Copy .env
      run: |
        cp .env.example .env
        php -r "file_put_contents('.env', str_replace('DB_DATABASE=laravel', 'DB_DATABASE=pns_dhampur', file_get_contents('.env')));"
        php -r "file_put_contents('.env', str_replace('DB_USERNAME=root', 'DB_USERNAME=root', file_get_contents('.env')));"
        php -r "file_put_contents('.env', str_replace('DB_PASSWORD=', 'DB_PASSWORD=password', file_get_contents('.env')));"
        php -r "file_put_contents('.env', str_replace('APP_DEBUG=false', 'APP_DEBUG=true', file_get_contents('.env')));"
        php -r "file_put_contents('.env', str_replace('LOG_LEVEL=debug', 'LOG_LEVEL=debug', file_get_contents('.env')));"

    - name: Install Dependencies
      run: composer install --prefer-dist --no-interaction --no-progress
      
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Generate key
      run: php artisan key:generate

    - name: Verify MySQL Connection
      run: |
        mysql --host=127.0.0.1 --port=3306 -uroot -ppassword -e "SHOW DATABASES;"
        mysql --host=127.0.0.1 --port=3306 -uroot -ppassword -e "SET GLOBAL innodb_strict_mode=OFF;"
    
    - name: Pre-check Migration Files for Syntax Errors
      run: |
        echo "Checking migration files for syntax errors before running migrations..."
        for migration in $(ls -1 database/migrations/*.php | sort); do
          echo "Checking syntax: $migration"
          php -l $migration
          if [ $? -ne 0 ]; then
            echo "‚ùå Syntax error found in migration file: $migration"
            exit 1
          fi
        done
        echo "‚úÖ All migration files passed syntax check"

    - name: Run Migrations in Proper Order
      id: run_migrations
      run: |
        echo "Running migrations with verbose output..."
        php artisan migrate --seed --verbose --force
      continue-on-error: true
      
    - name: Check Migration Status
      if: steps.run_migrations.outcome != 'success'
      run: |
        echo "‚ö†Ô∏è Migration failed, checking status..."
        php artisan migrate:status
        
    - name: Diagnose and Fix Migration Issues
      if: steps.run_migrations.outcome != 'success'
      run: |
        echo "üîç Diagnosing migration issues..."
        
        # Check database schema
        echo "Checking database schema..."
        mysql --host=127.0.0.1 --port=3306 -uroot -ppassword -e "SHOW TABLES FROM pns_dhampur;"
        
        # Try running migrations one by one in proper order
        echo "Attempting to run migrations one by one..."
        FAILED_MIGRATIONS=0
        
        for migration in $(ls -1 database/migrations/*.php | sort); do
          echo "Running migration: $migration"
          php artisan migrate --path=$migration --force --verbose
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed on migration: $migration"
            FAILED_MIGRATIONS=$((FAILED_MIGRATIONS+1))
            # Continue trying other migrations
          else
            echo "‚úÖ Migration successful: $migration"
          fi
        done
        
        if [ $FAILED_MIGRATIONS -gt 0 ]; then
          echo "‚ö†Ô∏è $FAILED_MIGRATIONS migration(s) failed. Check logs for details."
          exit 1
        else
          echo "‚úÖ All migrations completed successfully when run individually."
        fi
        
    - name: Run Tests with Coverage
      if: ${{ always() }}
      run: |
        echo "Running tests with coverage..."
        php artisan test --coverage
        
    - name: Environment-Specific Checks
      run: |
        echo "Running environment-specific checks..."
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "Pull Request detected - running additional validation checks"
          php artisan route:list --verbose
          php artisan config:clear
          php artisan view:clear
          php artisan optimize:clear
        else
          echo "Production deployment detected - running production readiness checks"
          php artisan route:cache
          php artisan config:cache
          php artisan view:cache
          php artisan optimize
          php artisan storage:link
        fi
        
    - name: Security Checks
      run: |
        echo "Running security checks..."
        # Check for exposed environment variables
        if grep -q "APP_KEY=" .env; then
          echo "‚ö†Ô∏è Warning: APP_KEY found in .env file"
        fi
        
        # Check for proper file permissions
        find storage -type d -exec chmod 755 {} \;
        find storage -type f -exec chmod 644 {} \;
        chmod 755 bootstrap/cache

    - name: Execute Tests with Coverage
      run: vendor/bin/phpunit --coverage-text